/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2014 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNO_FEATURE_NODE_H
#define OSGEARTH_ANNO_FEATURE_NODE_H 1

#include <osgEarthAnnotation/AnnotationNode>
#include <osgEarth/MapNode>
#include <osgEarthSymbology/Style>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/GeometryCompiler>
#include <osg/Polytope>

namespace osgEarth { namespace Annotation
{
    using namespace osgEarth;
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Renders a single feature. Since no feature profile is provided,
     * the feature must contain geometry that is in the same SRS as the map.
     * The feature must also include the Style you wish to use.
     */
    class OSGEARTHANNO_EXPORT FeatureNode : public AnnotationNode
    {
    public:
        META_AnnotationNode(osgEarthAnnotation, FeatureNode);

        /**
         * Constructs a new FeatureNode from a single Feature
         */
        FeatureNode( 
            MapNode* mapNode, 
            Feature* feature,
            const Style& style = Style(),
            const GeometryCompilerOptions& options = GeometryCompilerOptions() );

        /**
         * Constructs a new FeatureNode from a FeatureList
         */
        FeatureNode( 
            MapNode* mapNode, 
            FeatureList& features,
            const Style& style = Style(),
            const GeometryCompilerOptions& options = GeometryCompilerOptions() );

        virtual ~FeatureNode() { }

         /**
         * Gets the list of features
         */
        FeatureList& getFeatures() { return _features; };

        /**
         * Utility that lets you work on this FeatureNode as a single Feature instead of a list
         */
        Feature* getFeature();

        /**
         * Sets the contents of this FeatureNode to a single feature.
         */
        void setFeature(Feature* feature);

        /**
         * Get whether cluster culling is enabled on this FeatureNode
         */
        bool getClusterCulling() const;

        /*
         * Sets whether cluster culling is enabled on this FeatureNode.
         */
        void setClusterCulling( bool clusterCulling );


        /**
         * Call init to force a rebuild of this FeatureNode.  If you modify the features in the features list or add/remove features
         * call this function to rebuild the node.
         */
        void init();

    public: // AnnotationNode

        virtual osg::Group* getAttachPoint();

         virtual const Style& getStyle() const;

        virtual void setStyle(const Style& style);

    public: // MapNodeObserver

        virtual void setMapNode( MapNode* mapNode );

    public:

        FeatureNode(MapNode* mapNode, const Config& conf, const osgDB::Options* options);
        virtual Config getConfig() const;

    protected:
        FeatureList                  _features;
        GeometryCompilerOptions      _options;
        osg::Group*                  _attachPoint;
        osg::Polytope                _featurePolytope;
        Style                        _style;
        bool                         _needsRebuild;
        bool                         _clusterCulling;
        GeoExtent                    _extent;
        osg::NodeCallback*           _clusterCullingCallback;

        osg::ref_ptr< osg::Node >    _compiled;

        FeatureNode() { }
        FeatureNode(const FeatureNode& rhs, const osg::CopyOp& op) { }
        
        virtual void reclamp( const TileKey& key, osg::Node* tile, const Terrain* );

        void build();

        void updateClusterCulling();

        
    private:
        void clampMesh( osg::Node* terrainModel );
    };

} } // namespace osgEarth::Annotation

#endif // OSGEARTH_ANNO_FEATURE_NODE_H
